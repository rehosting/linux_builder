name: Compile and release

on:
  push:
    tags:
      - 'v*'

  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  prebuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Build this first, build.sh will use it later
      - name: Build kernel_builder Docker image
        run: docker build -t pandare/kernel_builder .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: rehosting
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create ephemeral Dockerfile
        run: |
          cat <<EOF > Dockerfile.linux_builder
          FROM pandare/kernel_builder
          COPY . /linux_builder
          RUN ln -s /linux_builder /app
          WORKDIR /app
          EOF

      - name: Update submodules
        run: git submodule update --init --depth 1

      - name: Build linux_builder Docker image
        run: |
          docker build -t rehosting/linux_builder:${{ github.ref_name }} -t rehosting/linux_builder:latest -f Dockerfile.linux_builder .
          docker push rehosting/linux_builder:${{ github.ref_name }}

      - name: Push Docker image as latest if on main
        if: github.ref == 'refs/heads/main'
        run: docker push rehosting/linux_builder:latest

  build:
    needs: prebuild
    # Only publish on tags. run git tag vX and git push origin vX
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false


    strategy:
      matrix:
        target: [armel, arm64, mipsel, mipseb, mips64el, mips64eb, powerpc, powerpc64, loongarch64, riscv64, x86_64]
        version: ["6.13"] # XXX: quotes are necessary, otherwise 4.10 -> 4.1

    steps:
      - name: Pull prebuilt image
        run: docker pull rehosting/linux_builder:${{ github.ref_name }}

      # - name: Ensure cache directory exists
      #   run: mkdir -p cache

      # - name: Restore kernel build cache
      #   id: restore-cache
      #   uses: actions/cache/restore@v4
      #   with:
      #     path: |
      #       cache
      #     key: kernel-build-${{ matrix.version }}-${{ matrix.target }}
      #     restore-keys: |
      #       kernel-build-${{ matrix.version }}-${{ matrix.target }}
      #       kernel-build-${{ matrix.version }}-
      #       kernel-build-

      # - name: Lint configs
        # run: ./build.sh --targets ${{ matrix.target }} --versions ${{ matrix.version }} --config-only

      - name: Build Kernel for ${{ matrix.target }}
        run: |
            mkdir -p cache
            docker run  --rm -v $PWD/cache:/tmp/build \
              rehosting/linux_builder:${{ github.ref_name }} \
              bash ./_in_container_build.sh false ${{ matrix.version }} ${{ matrix.target}} false false false

      # - name: Save kernel build cache
      #   id: save-cache
      #   uses: actions/cache/save@v4
      #   with:
      #     path: |
      #       cache/${{ matrix.version }}/${{ matrix.target }}/.config
      #       cache/${{ matrix.version }}/${{ matrix.target }}/**/*.o
      #       cache/${{ matrix.version }}/${{ matrix.target }}/**/*.ko
      #       cache/${{ matrix.version }}/${{ matrix.target }}/**/*.cmd
      #       cache/${{ matrix.version }}/${{ matrix.target }}/include/generated
      #       cache/${{ matrix.version }}/${{ matrix.target }}/include/config
      #       cache/${{ matrix.version }}/${{ matrix.target }}/scripts
      #       cache/${{ matrix.version }}/${{ matrix.target }}/arch/${{ matrix.target }}/include/generated
      #       # Potentially include intermediate link objects like built-in.a if needed
      #       # Exclude large final artifacts (may be complex due to glob issues)
      #       !cache/${{ matrix.version }}/${{ matrix.target }}vmlinux
      #       !cache/${{ matrix.version }}/${{ matrix.target }}System.map
      #       !cache/${{ matrix.version }}/${{ matrix.target }}/arch/${{ matrix.target }}/boot/
      #     key: kernel-build-${{ matrix.version }}-${{ matrix.target }}

      # Temporarily store each target's build output
      - name: Save ${{ matrix.target }} ${{ matrix.version }} build output
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ matrix.target }}.${{ matrix.version }}
          path: kernels-latest.tar.gz

      - name: Tar up intermediate output
        run: tar -cJvf build-intermediate-${{ matrix.target }}.${{ matrix.version }}.tar.xz cache/${{ matrix.version }}/${{ matrix.target }}

      - name: Upload build cache
        uses: actions/upload-artifact@v4
        with:
          name: build-intermediate-${{ matrix.target }}.${{ matrix.version }}
          path: build-intermediate-${{ matrix.target }}.${{ matrix.version }}.tar.xz

  aggregate:
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    env:
      MATRIX_VERSIONS: ${{ toJSON(needs.build.strategy.matrix.version) }}
    permissions:
      actions: write
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-kernels

      - name: Combine all kernels into a single archive
        run: |
          rm -rf combined-kernels && mkdir combined-kernels
          # Only extract kernels-latest.tar.gz archives, not intermediate ones
          for archive in $(find downloaded-kernels -name "kernels-latest.tar.gz"); do
            tar -xzf "$archive" -C combined-kernels
          done

          # Combine OSI profiles for each kernel version
          # otherwise the extracted kernel configs will clobber each other
          if [ -d combined-kernels/kernels/4.10 ] ; then
            for archive in $(find downloaded-kernels -name "kernels-latest.tar.gz"); do
              tar -O -xf "$archive" "kernels/4.10/osi.config";
            done > combined-kernels/kernels/4.10/osi.config
          fi

          if [ -d combined-kernels/kernels/6.13 ] ; then
            for archive in $(find downloaded-kernels -name "kernels-latest.tar.gz"); do
              tar -O -xf "$archive" "kernels/6.13/osi.config";
            done > combined-kernels/kernels/6.13/osi.config
          fi

          # Create a new single archive from the combined content
          tar -czvf kernels-latest.tar.gz -C combined-kernels .

      - name: Create and publish release
        uses: softprops/action-gh-release@v1
        with:
          files: kernels-latest.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}

      - name: Prepare Docker build context for artifact container
        run: |
          # Create a directory for the Docker build context
          mkdir -p docker-context/artifacts
          # Copy all intermediate tarballs (xz)
          find downloaded-kernels -name "build-intermediate-*.tar.xz" -exec cp {} docker-context/artifacts \;
          # Copy the combined kernel tarball
          cp kernels-latest.tar.gz docker-context/

      # Note: This assumes that there is no CMD or anything at the end of the Dockerfile
      - name: Update Dockerfile
        run: |
          cat <<'EOF' > docker-context/Dockerfile
          FROM rehosting/linux_builder:${{ github.ref_name }}
          COPY ./artifacts /artifacts
          COPY kernels-latest.tar.gz /linux_builder/kernels-latest.tar.gz
          EOF

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: rehosting
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t rehosting/linux_builder-artifacts:${{ github.ref_name }} -t rehosting/linux_builder-artifacts:latest docker-context
          docker push rehosting/linux_builder-artifacts:${{ github.ref_name }}
          docker push rehosting/linux_builder-artifacts:latest
